# glob function 
# 1. glob.glob() -- return all proper files at once
#    glob.glob(r'c:*.txt') -- capture all txt documents under C drive
#    glob.glob(r'E:\pic**.jpg') -- capture all jpg files which starting with 'pic' in E drive 
#    glob.glob(r'..\*.py') -- capture all py files in the upper location
# 2. glob.iglob() -- return a iteration that contains all qualified file

import glob

list_csv = glob.glob('/content/sample_data/*.csv' )
print(list_csv)

list_csv_iter = glob.iglob('/content/sample_data/*.csv' )
for i in list_csv_iter:
  print(i)


# if current fold exist: 1.gif , 2.txt , card.gif
# glob.glob('./[0-9].*')  []匹配指定范围内的字符，如[0-9]匹配数字
# >> ['./1.gif', './2.txt'] 
# glob.glob('*.gif')
# >> ['1.gif', 'card.gif']
# glob.glob('?.gif') ?代表一个字符
# >> ['1.gif']



# xml annotation to csv
# - Assume all xml store in ../Anontations 
# - xml files named as 000001.xml , 000002.xml , 000003.xml ....
# https://blog.csdn.net/weixin_38383877/article/details/103781688
 
'''
function:xml2csv
'''
import os
import glob
import pandas as pd
import xml.etree.ElementTree as ET
 
 
def xml_to_csv(path):
 
    xml_list = []
    for xml_file in glob.glob(path + '/*.xml'):
        tree = ET.parse(xml_file) # standard 
        root = tree.getroot()     # standard
        for member in root.findall('object'): # finds only elements with a tag which are direct children of the current element.
            value = (root.find('filename').text,
                     int(root.find('size')[0].text), # image width
                     int(root.find('size')[1].text), # image height
                     member[0].text,                 # Class / label
                     int(member[4][0].text),         # xmin (boundary)
                     int(member[4][1].text),         # ymin
                     int(member[4][2].text),         # xmax
                     int(member[4][3].text)          # ymax
                     )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height', 'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df
 
 
def main():
    for directory in ['train', 'test']:
        project_path = 'E:\\gitcode\\tensorflow-model\\VOCPolice\\VOC2007'
        image_path = os.path.join(project_path, directory)
        xml_df = xml_to_csv(image_path)
        xml_df.to_csv('E:/gitcode/tensorflow-model/VOCPolice/VOC2007/{}_labels.csv'.format(directory), index=None)
        print('Successfully converted xml to csv.')
 
main()
 
######################################################
########### XML Samples for cat / dog recognition ####
<annotation>
	<folder>OXIIIT</folder>
	<filename>Abyssinian_1.jpg</filename>
	<source>
		<database>OXFORD-IIIT Pet Dataset</database>				<annotation>OXIIIT</annotation>
		<image>flickr</image>
	</source>
	<size>
		<width>600</width>
		<height>400</height>
		<depth>3</depth>
	</size>
	<segmented>0</segmented>
	<object>
		<name>cat</name>
		<pose>Frontal</pose>
		<truncated>0</truncated>
		<occluded>0</occluded>
		<bndbox>
			<xmin>333</xmin>
			<ymin>72</ymin>
			<xmax>425</xmax>
			<ymax>158</ymax>
		</bndbox>
		<difficult>0</difficult>
	</object>
</annotation>
